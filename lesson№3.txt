1. Фикстуры данных представляют собой механизм для заполнения баз данных для разработки и тестирования подходящими
    тестовыми данными. В конце этой главы вы определите модель блога, обновите базу данных, чтобы отразить новую модель,
     и создадите несколько фикстур данных.
2. Создадим базу данных с помощью команды Doctrine 2. Эта команда лишь создаёт базу данных и не создаёт никаких таблиц
   в базе. Если база данных с таким же именем уже существует будет выведено сообщение об ошибке, а существующая база
   данных будет оставлена без изменений - 'php app/console doctrine:database:create'
3. Мы начнём с создания класса сущности Blog. Мы уже говорили о сущностях в предыдущей части, когда создавали сущность
   Enquiry. Поскольку сущность предназначена для хранения данных, имеет смысл использовать одну сущность для
   представления записи в блоге. Когда мы определяем сущность мы не говорим этим чтобы данные автоматически были
   сопоставлены с базой. Мы видели это в нашей сущности Enquiry (Запрос) где данные, хранящиеся в сущности были лишь
   только отправлены по электронной почте веб-мастеру.
   Создайте новый файл src/Blogger/BlogBundle/Entity/Blog.php.
4. Как вы видите это простой PHP класс. Он не расширяет родительский и не имеет методов доступа. Каждое свойство
   заявлено как protected таким образом, мы не в состоянии получить доступ к ним при работе с объектом этого класса.
   Мы могли бы прописать геттеры и сеттеры для этих свойств, но в Doctrine 2 есть команда, которая выполняет эту задачу
   за нас. Перед тем как запустить эту команду, мы должны сообщить Doctrine 2 каким образом сущность Blog должна быть
   отображена в базе данных. Информация указана в качестве метаданных, используя Doctrine 2 сопоставления.
   Метаданные могут быть определены в разных форматах включая: YAML, PHP, XML и Аннотации. В этом руководстве мы будем
   использовать аннотации. Важно отметить, что не все свойства в объекте должны быть сохранены, так что мы не будем
   предоставлять метаданные для них. Это дает нам возможность выбрать только те элементы, которые нам требуются,
   чтобы Doctrine 2 сопоставило их с базой данных. Замените содержимое класса сущности Blog, расположенной
   src/Blogger/BlogBundle/Entity/Blog.php
5. Во-первых, мы импортируем и определяем пространство имен Doctrine 2 ОRМ Mappings. Это позволяет нам использовать
   аннотации для описания метаданных сущности. Метаданные содержат информацию о том, как свойства должны быть
   отображены в базе данных.
6. Посмотрев внимательнее, вы возможно, заметили, что для свойства $comments не описаны метаданные. Это произошло
   потому, что мы не нуждаемся в сохранении, оно будет просто предоставлять набор комментариев, относящихся
   к сообщению в блоге
7. Теперь, когда мы поговорили как сопоставить свойства сущности в Doctrine 2, мы можем сгенерировать методы доступа,
   используя следующую команду в консоли - 'php app/console doctrine:generate:entities Blogger'
8. В то время как мы используем аннотации в нашей сущности, можно преобразовать информацию сопоставления в другие
   поддерживаемые форматы сопоставления используя команду doctrine:mapping:convert. Например, следующая команда,
   преобразует сопоставления сущности выше в yml формат.
   $ php app/console doctrine:mapping:convert --namespace="Blogger\BlogBundle\Entity\Blog" yaml src/Blogger/BlogBundle/Resources/config/doctrine
   И создаст файл в src/Blogger/BlogBundle/Resources/config/doctrine/Blogger.BlogBundle.Entity.Blog.orm.yml
    который будет содержать сопоставления сущности blog в yml формате.
9. Теперь мы готовы создать представление сущности Blog в базе данных. Есть 2 способа с помощью которых мы можем достичь
   этого. Мы можем использовать Doctrine 2 schema команды для обновления базы данных или более мощные, миграции
   Doctrine 2. Сейчас мы будем использовать schema команды. Миграции Doctrine буду рассмотрены в следующей
   части руководства.
10. Создание таблицы blog. Для создания таблицы blog мы можем воспользоваться следующей командой.
    $ php app/console doctrine:schema:create
    Это вызовет действия для генерации схемы базы данных для сущности blog. Вы можете также передать --dump-sql опцию,
    чтобы сделать дамп SQL. Если вы посмотрите на базу данных, то вы увидите, что таблица blog была создана с полями,
    к которым мы сделали сопоставление.
11. Мы использовали ряд консольных команд Symfony2. Вы можете получить помощь по любой команде введя опцию --help.
    Например, чтобы увидеть помощь по команде doctrine:schema:create введите:
    $ php app/console doctrine:schema:create --help
    Справочная информация выведет методы использования, а также доступные опции. Большинство команд выполняются
    с несколькими опциями, которые могут расширить её.
12. Модель и отображение. Вывод записи блога.
    Сейчас у нас есть сущность Blog и обновлённая база данных для её представления, мы можем начать интегрировать
    модель в отображение. Мы начнем с создания страницы show нашего блога.
13. Маршрут Show Blog
    Мы начнём с создания маршрута для blog show action. Блог будет идентифицировать запись по уникальному ID, таким
    образом этот ID должен быть представлен в URL. Обновите BloggerBlogBundle маршрут, расположенный
    src/Blogger/BlogBundle/Resources/config/routing.yml следующим:
    # src/Blogger/BlogBundle/Resources/config/routing.yml
    BloggerBlogBundle_blog_show:
        path:  /{id}
        defaults: { _controller: "BloggerBlogBundle:Blog:show" }
        requirements:
            methods:  GET
            id: \d+
14. Так как ID записи должен быть представлен в URL, мы определили id placeholder. Это означает что URL вида
    http://localhost:8000/1 и http://localhost:8000/my-blog будут соответствовать этому маршруту. Однако, мы знаем,
    что id блога должно быть целым числом, (он определён таким образом в сопоставлении сущности) поэтому мы можем
    добавить ограничение, определяющее что этот маршрут будет соответствовать только тогда, когда параметр
    id содержит целое число. Это достигается с помощью id: \d+ требованием маршрута. Теперь только первый пример
    URL будет соответствовать, а http://localhost:8000/my-blog уже нет. Вы также можете увидеть, как соответствующий
    маршрут выполнит showAction, метод контроллера Blogger\BlogBundle\Blog. Этот контроллер ещё должен быть создан.
15. Клей связывающий Модель и отображение — это контроллер, это то место где мы начнём создание страницы.
    Мы могли бы добавить метод showAction к нашему существующему контроллеру Page, но так как эта страница посвящена
    отображению сущностей blog, будет лучше добавить их в свой собственный контроллер Blog.
    Создайте новый файл, расположенный в src/Blogger/BlogBundle/Controller/BlogController.php и вставьте следующее
16. Мы создали новый контроллер для сущности Blog и определили метод showAction, а также задали id параметр в
    BloggerBlogBundle_blog_show правиле маршрута, он будет вставлен в качестве аргумента в метод showAction.
    Если бы мы определили больше параметров в правиле маршрута, они бы так же были бы вставлены в качестве аргументов,
    через запятую.
17. Далее нам нужно получить сущность Blog из базы данных. Мы впервые используем другой вспомогательный метод класса
    Symfony\Bundle\FrameworkBundle\Controller\Controller, чтобы получить Doctrine2 Manager. Работой Manager является
    обрабатывание, извлечение и сохранение объектов в базу данных и из неё. Далее мы используем объект Manager для
    получения Doctrine 2 Репозитория для сущности BloggerBlogBundle:Blog. Синтаксис, указанный здесь, просто сокращения,
    которые могут быть использованы в Doctrine 2 вместо указания полного названия сущности
    Blogger\BlogBundle\Entity\Blog. Вместе с объектом репозитория мы вызываем метод find() и передаём в аргументе $id.
    Этот метод будет получать объект по его первичному ключу.
    И в конце мы проверяем, что сущность была найдена и передаём её в отображение. Если сущности не будет найдено,
    то вернётся createNotFoundException. Это сформирует ответ 404 Not Found.
18. Объект репозитория предоставляет доступ к ряду полезных вспомогательных методов, включая
    // Return entities where 'author' matches 'dsyph3r'
    $em->getRepository('BloggerBlogBundle:Blog')->findBy(array('author' => 'dsyph3r'));
    // Return one entity where 'slug' matches 'symblog-tutorial'
    $em->getRepository('BloggerBlogBundle:Blog')->findOneBySlug('symblog-tutorial');
19. Мы будем создавать свои собственные пользовательские классы в Репозитории в следующей части, когда нам потребуются
    более сложные запросы к базе данных.
20. Мы создали метод showAction для контроллера Blog и можем сфокусироваться на отображении сущности Blog.
    Как указано в методе showAction будет выведен шаблон BloggerBlogBundle:Blog:show.html.twig.
    Давайте создадим этот шаблон src/Blogger/BlogBundle/Resouces/views/Blog/show.html.twig
21. Как и следовало ожидать, мы начнем с расширения основного шаблона Blogger BlogBundle. Далее мы переопределим
    заголовок страницы заголовком для нашего блога. Это будет полезно для SEO, так как заголовок страницы блога является
    более описательным, чем заголовок по умолчанию. Наконец, мы переопределим блок body для вывода контента сущности
    Blog. Мы используем функцию asset снова, чтобы вывести изображение в блоге. Изображения блога должны быть помещены
    в директорию web/images.
22. Для того сделать визуальное оформление, нам нужно добавить некоторый стили. Добавьте стили ниже в
    src/Blogger/BlogBundle/Resouces/public/css/blog.css.
23. Если вы не используете метод символических ссылок для обращения к assets бандла в папке web, вы должны повторно
    запустить команду установки assets - 'php app/console assets:install web'
24. Так как мы создали контроллер и отображение для метода showAction давайте взглянем на страницу. Введите в ваш
    браузер http://localhost:8000/1 (в моем случае - http://blogs/web/app_dev.php/1). Это не та страница, которую вы
    ожидали увидеть? Symfony сгенерировал ответ 404 Not Found. Это произошло потому что у нас нет данных в базе,
    т.е. сущность с id равным 1 не может быть найдена. Можно просто вставить строку в таблицу blog вашей базы данных,
    но мы будем использовать метод значительно лучше: Фикстуры данных.
25. Мы можем использовать фикстуры для заполнения базы данных некоторыми простыми тестовыми данными. Для этого мы
    используем doctrine-fixtures-bundle и data-fixtures. Расширение Doctrine Fixtures не поставляется с Symfony2,
    мы должны вручную его установить. К счастью это простая задача. Откройте файл composer.json расположенный в корне
    проекта и вставьте следующее:
    "require": {
        // ...
        "doctrine/doctrine-fixtures-bundle": "dev-master",
        "doctrine/data-fixtures" : "dev-master"
    }
26. Далее обновите библиотеки командой - 'composer update'. Это обновит все библиотеки с Github и установит их в
    необходимые директории.
27. Теперь давайте зарегистрируем DoctrineFixturesBundle в kernel расположенного в
    app/AppKernel.php
    // app/AppKernel.php
    public function registerBundles()
    {
        $bundles = array(
            // ...
            new Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle(),
            // ...
        );
    }
28. Теперь мы готовы определить фикстуры для нашего блога. Создайте файл фикстур
    src/Blogger/BlogBundle/DataFixtures/ORM/BlogFixtures.php
29. Файл фикстур демонстрирует ряд важных особенностей при использовании Doctrine 2, в том числе, как сохранять объекты
    в базу данных. Давайте посмотрим, как мы создаем одну запись в блоге.
    $blog1 = new Blog();
    $blog1->setTitle('A day in paradise - A day with Symfony2');
    $blog1->setBlog('Lorem ipsum dolor sit d us imperdiet justo scelerisque. Nulla consectetur...');
    $blog1->setImage('beach.jpg');
    $blog1->setAuthor('dsyph3r');
    $blog1->setTags('symfony2, php, paradise, symblog');
    $blog1->setCreated(new \DateTime());
    $blog1->setUpdated($this->getCreated());
    $manager->persist($blog1);
    $manager->flush();
30. Мы начинаем с создания объекта Blog и определения значений его свойств. На данный момент Doctrine 2 ничего не знает
    об объекте сущности. Это произойдёт только тогда, когда мы вызываем $manager->persist($blog1), этим мы поручаем
    Doctrine 2, приступить к управлению этого объекта сущности. Объект $manager здесь является экземпляром объекта
    Manager который мы видели ранее при получении объектов из базы данных. Важно отметить, что в то время как Doctrine 2
    в настоящее время известно об объекте сущности, она до сих пор не сохраняется в базе данных. Для этого необходим
    вызов $manager->flush() Метод flush заставляет Doctrine 2, начать взаимодействовать с базой данных и задействовать
    все сущности, которыми она управляет. Для лучшей производительности следует группировать команды Doctrine 2 и
    выполнять все действия за один раз. Мы создали каждый объект, попросили Doctrine 2, начать управлять ими, а затем
    выполнили необходимые операции.
31. Загрузка фикстур. Теперь мы готовы загрузить фикстуры в базу данных - 'php app/console doctrine:fixtures:load'
32. В этой части мы посмотрим на 2 свойства меток времени в сущности Blog: created и updated. Функциональные
    возможности для этих 2-х членов, обычно называют как поведение Timestampable. Эти свойства содержат время, когда
    была создана запись и время её последнего обновления. Поскольку мы не хотим, вручную устанавливать эти поля каждый
    раз, когда мы создаем или обновляем запись, мы можем использовать Doctrine 2 для этих целей.
33. Doctrine 2 поставляется с Event System, которая обеспечивает Lifecycle Callbacks. Мы можем использовать эти события
    обратного вызова, чтобы зарегистрировать наши сущности, получать уведомления о событиях в течение всего срока жизни
    объекта. Несколько примеров событий, о которых мы можем быть уведомлены, прежде чем произойдет обновление, после
    сохранения и удаления. Чтобы использовать Lifecycle Callbacks в нашей сущности, нам нужно зарегистрировать сущность
    для них. Это делается с помощью метаданных, в сущности. Обновите сущность Blog
    src/Blogger/BlogBundle/Entity/Blog.php - добавить "@ORM\HasLifecycleCallbacks"
34. Теперь давайте добавим метод в сущности Blog который регистрирует событие PreUpdate. Мы также добавим конструктор,
    чтобы установить значения по умолчанию для свойств created и updated.
35. Мы зарегистрировали сущность Blog которая будет уведомлена о событии preUpdate, чтобы установить updated значение
    свойства. Теперь, когда вы удалите фикстуры из таблицы, а также удалите из каждого объекта
    setCreated();
    setUpdated();
    в файле
    src/Blogger/BlogBundle/DataFixtures/ORM/BlogFixtures.php
    и повторно запустите задачу загрузки фикстур вы увидите, что created и updated свойства установлены автоматически.
36. Мы рассмотрели ряд концепций для работы с моделями, в Doctrine 2. Рассмотрели Фикстуры данных, которые предоставили
    нам простой способ, получения тестовых данных для разработки и тестирования нашего приложения.
    Далее мы рассмотрим расширение модели, добавив сущность для комментариев. Мы начнем создавать домашнюю страницу и
    применим для этого пользовательский репозиторий. Мы также введем понятие Миграций Doctrine и как формы
    взаимодействуют с Doctrine 2, для того чтобы мы могли размещать комментарии в блоге.
